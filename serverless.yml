service: ccg

plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-python-requirements
  - serverless-stack-output
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: false
      migrate: true
  output:
    file: stack.yml
  pythonRequirements:
    dockerizePip: non-linux
  serverless-offline:
    httpPort: 5001

package:
  individually: false
  include:
    - './backend/**'
  exclude:
    - '**'

provider:
  environment:
    DYNAMODB_TABLE: !Ref dynamodbTable
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "*"
  name: aws
  profile: personal
  region: us-east-1
  runtime: python3.8
  stage: ${opt:stage, "dev"}

functions:
  get_access_token:
    handler: backend/endpoints/auth.get_access_token
    events:
      - httpApi:
          path: /get_access_token
          method: POST
  get_shop:
    handler: backend/endpoints/shops.get
    events:
      - httpApi:
          path: /shops
          method: GET
  create_shop:
    handler: backend/endpoints/shops.post
    events:
      - httpApi:
          path: /shops
          method: POST
  update_shop:
    handler: backend/endpoints/shops.patch
    events:
      - httpApi:
          path: /shops
          method: PATCH
  get_templates:
    handler: backend/endpoints/templates.get
    events:
      - httpApi:
          path: /templates
          method: GET
  create_template:
    handler: backend/endpoints/templates.post
    events:
      - httpApi:
          path: /templates
          method: POST

resources:
  Resources:
    dynamodbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: resource_id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: resource_id
            AttributeType: S
          - AttributeName: resource_type
            AttributeType: S
        GlobalSecondaryIndexes:
        - IndexName: resource_type
          KeySchema:
            - AttributeName: resource_type
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        TableName: ${self:service}

    s3FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:service}-${self:provider.stage}-frontend
        LoggingConfiguration:
          DestinationBucketName: !Ref s3FrontendAccessLogsBucket
          LogFilePrefix: ${self:service}-access-logs
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    s3FrontendAccessLogsBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: LogDeliveryWrite
        BucketName: ${self:service}-${self:provider.stage}-frontend-access-logs

  Outputs:
    dynamodbTableName:
      Value: !Ref dynamodbTable
      Description: DynamoDB Table`
    s3FrontendBucketWebsiteURL:
      Value: !GetAtt [ s3FrontendBucket, WebsiteURL ]
      Description: URL for the frontend website hosted on S3
    s3FrontendAccessLogsBucketName:
      Value: !Ref s3FrontendAccessLogsBucket
      Description: Frontend access logs bucket name
