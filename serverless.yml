service: ccg

plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-python-requirements
  - serverless-stack-output
  - serverless-offline

custom:
  dynamodb:
    seed:
      domain:
        sources:
          - table: ccg
            sources: [ ./dev.seed.json ]
    stages:
      - dev
    start:
      port: 8000
      inMemory: false
      migrate: true
      seed: true
  output:
    file: stack.yml
  pythonRequirements:
    dockerizePip: non-linux
  serverless-offline:
    httpPort: 5001

package:
  individually: false
  include:
    - './backend/**'
  exclude:
    - '**'

provider:
  environment:
    DYNAMODB_TABLE: !Ref dynamodbTable
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "*"
  name: aws
  profile: personal
  region: us-east-1
  runtime: python3.8
  stage: ${opt:stage, "dev"}

functions:
  get_access_token:
    handler: backend/endpoints/auth.get_access_token
    events:
      - httpApi:
          path: /get_access_token
          method: POST
  get_shop:
    handler: backend/endpoints/shops.get
    events:
      - httpApi:
          path: /shops
          method: GET
  create_shop:
    handler: backend/endpoints/shops.post
    events:
      - httpApi:
          path: /shops
          method: POST
  update_shop:
    handler: backend/endpoints/shops.patch
    events:
      - httpApi:
          path: /shops
          method: PATCH
  get_products:
    handler: backend/endpoints/products.get
    events:
      - httpApi:
          path: /products
          method: GET
      - httpApi:
          path: /products/{id}
          method: GET
  get_discounts:
    handler: backend/endpoints/discounts.get
    events:
      - httpApi:
          path: /discounts
          method: GET
      - httpApi:
          path: /discounts/{id}
          method: GET
  get_templates:
    handler: backend/endpoints/templates.get
    events:
      - httpApi:
          path: /templates
          method: GET
  create_template:
    handler: backend/endpoints/templates.post
    events:
      - httpApi:
          path: /templates
          method: POST

resources:
  Resources:
    dynamodbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: resource_id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: resource_id
            AttributeType: S
          - AttributeName: resource_type
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: resource_type
            KeySchema:
              - AttributeName: resource_type
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TableName: ${self:service}
    s3FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:service}-frontend
        LoggingConfiguration:
          DestinationBucketName: !Ref s3FrontendAccessLogsBucket
          LogFilePrefix: ${self:service}-access-logs
    s3FrontendAccessLogsBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: LogDeliveryWrite
        BucketName: ${self:service}-frontend-access-logs
    cloudfrontFrontendDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !Join
                - ''
                - - !Ref s3FrontendBucket
                  - '.s3.amazonaws.com'
              Id: ${self:service}-cloudfront-origin
              S3OriginConfig:
                OriginAccessIdentity: !Join
                  - ''
                  - - 'origin-access-identity/cloudfront/'
                    - !Ref cloudfrontFrontendOriginAccessIdentity
          Enabled: 'true'
          Comment: CloudFront distribution for ${self:service} env
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ${self:service}-cloudfront-origin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          HttpVersion: http2
    cloudfrontFrontendOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'CloudFront Origin Access Identity (OAI) for ${self:service}'

  Outputs:
    dynamodbTableName:
      Value: !Ref dynamodbTable
      Description: DynamoDB Table`
    cloudfrontFrontendDistributionName:
      Value: !Ref cloudfrontFrontendDistribution
      Description: CloudFront Distribution for ${self:service}
    cloudfrontFrontendDistributionURL:
      Value: !Join [ '', [ 'https://', !GetAtt [ cloudfrontFrontendDistribution, DomainName ] ] ]
      Description: CloudFront URL for ${self:service}
    cloudfrontFrontendOriginAccessIdentityName:
      Value: !Ref cloudfrontFrontendOriginAccessIdentity
      Description: CloudFront Origin Access Identity (OAI) for ${self:service}
